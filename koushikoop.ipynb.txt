{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d76f8bed-3abb-41f4-966d-69e083404812",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the object variable value :  10\n",
      "the class variable value :  1\n",
      "object wth value 10 is going out of scope \n",
      "the object variable value :  20\n",
      "the class variable value :  1\n",
      "object wth value 20 is going out of scope \n",
      "the object variable value :  30\n",
      "the class variable value :  1\n",
      "object wth value 30 is going out of scope \n",
      "object wth value 10 is going out of scope \n",
      "object wth value 20 is going out of scope \n",
      "object wth value 30 is going out of scope \n"
     ]
    }
   ],
   "source": [
    "#delete methodb__del__()\n",
    "class abc():\n",
    "    classvar=0\n",
    "    def __init__(self,var):\n",
    "        abc.classvar+=1\n",
    "        self.var=var\n",
    "        print(\"the object variable value : \",var)\n",
    "        print(\"the class variable value : \",abc.classvar)\n",
    "    def __del__(self):\n",
    "        abc.classvar-=1\n",
    "        print(\"object wth value %d is going out of scope \"%self.var)\n",
    "obj1=abc(10)\n",
    "obj2=abc(20)\n",
    "obj3=abc(30)\n",
    "del obj1\n",
    "del obj2\n",
    "del obj3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50d0b137-de4c-4384-ab3f-0862b1f06b21",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "special methods \n",
    "__repr__()\n",
    "__len__()\n",
    "__cmp__()\n",
    "__call__()\n",
    "__hash__()\n",
    "\n",
    "operational\n",
    "__gt__(),__ge__(),__lt__(),__le__(),__eq__(),__ne__()\n",
    "\n",
    "__iter__()\n",
    "__getitem__()\n",
    "__setitem__()\n",
    "\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78db80b7-cc2a-4628-ae7a-10e7befdb39d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#List comprehension \n",
    "# lambda \n",
    "#swap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bb7b8efb-40e3-40bf-b809-e3cf1d9cde1b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Modify\n",
      "[1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
      "After Modify\n",
      "[1, 2, 3, 10, 5, 6, 7, 8, 9]\n"
     ]
    }
   ],
   "source": [
    "class num:\n",
    "    def __init__(self,mylist):\n",
    "        self.mylist=mylist\n",
    "    def __getitem__(self,index):\n",
    "        return self.mylist[index]\n",
    "    def __setitem__(self,index,val):\n",
    "        self.mylist[index]=val\n",
    "numlist=num([1,2,3,4,5,6,7,8,9])\n",
    "print(\"Before Modify\")\n",
    "print(numlist.mylist)\n",
    "numlist[3]=10\n",
    "print(\"After Modify\")\n",
    "print(numlist.mylist)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "7bb3158d-ae74-413f-884c-a326792a1f5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "From class method :  10\n",
      "From class method :  100\n",
      "From main module : var1= 10\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'abc' object has no attribute '__v2'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[26], line 12\u001b[0m\n\u001b[0;32m     10\u001b[0m obj\u001b[38;5;241m.\u001b[39mdisplay()\n\u001b[0;32m     11\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFrom main module : var1=\u001b[39m\u001b[38;5;124m\"\u001b[39m,obj\u001b[38;5;241m.\u001b[39mv1)\n\u001b[1;32m---> 12\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFrom main module : var1=\u001b[39m\u001b[38;5;124m\"\u001b[39m,obj\u001b[38;5;241m.\u001b[39m__v2)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'abc' object has no attribute '__v2'"
     ]
    }
   ],
   "source": [
    "#public variable and private variables\n",
    "class abc():\n",
    "    def __init__(self,v1,v2):\n",
    "        self.v1=v1  #public var\n",
    "        self.__v2=v2  #private var\n",
    "    def display(self):\n",
    "        print(\"From class method : \",self.v1)\n",
    "        print(\"From class method : \",self.__v2)\n",
    "obj=abc(10,100)\n",
    "obj.display()\n",
    "print(\"From main module : var1=\",obj.v1)\n",
    "print(\"From main module : var1=\",obj.__v2 #here it is not accessed outside the class .B'coz it is private variable\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcb759f1-86f2-4609-8907-b3f23373b513",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eb51821-9cce-4100-a3b9-6757bbbe1755",
   "metadata": {},
   "outputs": [],
   "source": [
    "''' built-in class attributes .__\n",
    "1.  .__dict__:\n",
    "2.  .__doc__:\n",
    "3.  .__name__:\n",
    "4.  .__module__:\n",
    "5.  .__bases__:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1905f445-62f7-41a1-bbf6-f9eeff1e0414",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Object .__dict__ =  {'v1': 11, 'v2': 1.2345}\n",
      "Object .__doc__ =  None\n",
      "Class .__name__ =  abc\n",
      "Object .__module__ =  __main__\n",
      "Class .__bases__ =  (<class 'object'>,)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "class abc():\n",
    "    def __init__(self,v1,v2):\n",
    "      self.v1=v1\n",
    "      self.v2=v2\n",
    "    def display(self):\n",
    "        print(\"var1:\",self.v1)\n",
    "        prnt(\"var2:\",self.v2)\n",
    "obj=abc(11,1.2345)\n",
    "print(\"Object .__dict__ = \",obj.__dict__)\n",
    "print(\"Object .__doc__ = \",obj.__doc__)\n",
    "print(\"Class .__name__ = \",abc.__name__)\n",
    "print(\"Object .__module__ = \",obj.__module__)\n",
    "print(\"Class .__bases__ = \",abc.__bases__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "f5f1e823-59f5-40f3-8564-8aa207178f53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Base Class 1 \n",
      "Base class 2\n",
      "Derived Class\n"
     ]
    }
   ],
   "source": [
    "#inheritance-multiple \n",
    "#code to demonstrate the call from super class through constructor of base class\n",
    "class base1(object):\n",
    "    def __init__(self):\n",
    "        print(\"Base Class 1 \")\n",
    "        super(base1,self).__init__()\n",
    "class base2(object):\n",
    "    def __init__(self):\n",
    "        print(\"Base class 2\")\n",
    "        super(base2,self).__init__()\n",
    "class derived(base1,base2):\n",
    "    def __init__(self):\n",
    "      super(derived,self).__init__()\n",
    "      print(\"Derived Class\")\n",
    "d=derived()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "cd8f140e-8953-42a6-b6bd-366a0c33de06",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Derived Class\n"
     ]
    }
   ],
   "source": [
    "#inheritance-multiple \n",
    "#code to demonstrate the call from super class through constructor of base class withouit super class\n",
    "class base1(object):\n",
    "    def __init__(self):\n",
    "        print(\"Base Class 1 \")\n",
    "class base2(object):\n",
    "    def __init__(self):\n",
    "        print(\"Base class 2\")\n",
    "class derived(base1,base2):\n",
    "    def __init__(self):\n",
    "      print(\"Derived Class\")\n",
    "d=derived()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7721ad0f-3aff-44e3-8e31-314fb5f08235",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "406352a8-bee6-4745-8a94-c5be8100f6bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the value of a :  2\n",
      "Enter the value of b :  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Addition: 5\n",
      "Subtraction: -1\n",
      "Product: 6\n"
     ]
    }
   ],
   "source": [
    "#multiple inheritance using in calc\n",
    "class addition:\n",
    "    def add(self,a,b):\n",
    "        return a+b\n",
    "class subtract:\n",
    "    def sub(self,a,b):\n",
    "        return a-b\n",
    "class calc(addition,subtract):\n",
    "    def mul(self,a,b):\n",
    "        return a*b\n",
    "c=calc()\n",
    "num1=int(input(\"Enter the value of a : \"))\n",
    "num2=int(input(\"Enter the value of b : \"))\n",
    "print(\"Addition:\",c.add(num1,num2))\n",
    "print(\"Subtraction:\",c.sub(num1,num2))\n",
    "print(\"Product:\",c.mul(num1,num2))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bda9940-7050-4a31-9b00-0ae4a5d72971",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
